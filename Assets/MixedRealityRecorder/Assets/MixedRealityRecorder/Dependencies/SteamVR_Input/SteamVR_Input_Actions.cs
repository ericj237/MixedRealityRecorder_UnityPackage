//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Valve.VR
{
    using System;
    using UnityEngine;
    
    
    public partial class SteamVR_Actions
    {
        
        private static SteamVR_Action_Boolean p_default_InteractUI;
        
        private static SteamVR_Action_Boolean p_default_Teleport;
        
        private static SteamVR_Action_Boolean p_default_GrabPinch;
        
        private static SteamVR_Action_Boolean p_default_GrabGrip;
        
        private static SteamVR_Action_Pose p_default_Pose;
        
        private static SteamVR_Action_Skeleton p_default_SkeletonLeftHand;
        
        private static SteamVR_Action_Skeleton p_default_SkeletonRightHand;
        
        private static SteamVR_Action_Single p_default_Squeeze;
        
        private static SteamVR_Action_Boolean p_default_HeadsetOnHead;
        
        private static SteamVR_Action_Boolean p_default_SnapTurnLeft;
        
        private static SteamVR_Action_Boolean p_default_SnapTurnRight;
        
        private static SteamVR_Action_Vibration p_default_Haptic;
        
        private static SteamVR_Action_Boolean p_mixedRealityRecorder_OperatorToggleRecording;
        
        private static SteamVR_Action_Boolean p_mixedRealityRecorder_OperatorTrigger;
        
        private static SteamVR_Action_Boolean p_mixedRealityRecorder_UserTrigger;
        
        private static SteamVR_Action_Boolean p_mixedRealityRecorder_UserNextPrompterPage;
        
        private static SteamVR_Action_Boolean p_mixedRealityRecorder_OperatorRotateScene;
        
        private static SteamVR_Action_Boolean p_mixedRealityRecorder_OperatorCycleMode;
        
        private static SteamVR_Action_Boolean p_mixedRealityRecorder_UserCycleMode;
        
        private static SteamVR_Action_Boolean p_mixedRealityRecorder_OperatorDPadUp;
        
        private static SteamVR_Action_Boolean p_mixedRealityRecorder_OperatorDPadDown;
        
        private static SteamVR_Action_Boolean p_mixedRealityRecorder_OperatorDPadRight;
        
        private static SteamVR_Action_Boolean p_mixedRealityRecorder_OperatorDPadLeft;
        
        private static SteamVR_Action_Boolean p_mixedRealityRecorder_UserDPadUp;
        
        private static SteamVR_Action_Boolean p_mixedRealityRecorder_UserDPadDown;
        
        private static SteamVR_Action_Boolean p_mixedRealityRecorder_UserDPadRight;
        
        private static SteamVR_Action_Boolean p_mixedRealityRecorder_UserDPadLeft;
        
        public static SteamVR_Action_Boolean default_InteractUI
        {
            get
            {
                return SteamVR_Actions.p_default_InteractUI.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_Teleport
        {
            get
            {
                return SteamVR_Actions.p_default_Teleport.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_GrabPinch
        {
            get
            {
                return SteamVR_Actions.p_default_GrabPinch.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_GrabGrip
        {
            get
            {
                return SteamVR_Actions.p_default_GrabGrip.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Pose default_Pose
        {
            get
            {
                return SteamVR_Actions.p_default_Pose.GetCopy<SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Skeleton default_SkeletonLeftHand
        {
            get
            {
                return SteamVR_Actions.p_default_SkeletonLeftHand.GetCopy<SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Skeleton default_SkeletonRightHand
        {
            get
            {
                return SteamVR_Actions.p_default_SkeletonRightHand.GetCopy<SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Single default_Squeeze
        {
            get
            {
                return SteamVR_Actions.p_default_Squeeze.GetCopy<SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Boolean default_HeadsetOnHead
        {
            get
            {
                return SteamVR_Actions.p_default_HeadsetOnHead.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_SnapTurnLeft
        {
            get
            {
                return SteamVR_Actions.p_default_SnapTurnLeft.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_SnapTurnRight
        {
            get
            {
                return SteamVR_Actions.p_default_SnapTurnRight.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vibration default_Haptic
        {
            get
            {
                return SteamVR_Actions.p_default_Haptic.GetCopy<SteamVR_Action_Vibration>();
            }
        }
        
        public static SteamVR_Action_Boolean mixedRealityRecorder_OperatorToggleRecording
        {
            get
            {
                return SteamVR_Actions.p_mixedRealityRecorder_OperatorToggleRecording.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean mixedRealityRecorder_OperatorTrigger
        {
            get
            {
                return SteamVR_Actions.p_mixedRealityRecorder_OperatorTrigger.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean mixedRealityRecorder_UserTrigger
        {
            get
            {
                return SteamVR_Actions.p_mixedRealityRecorder_UserTrigger.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean mixedRealityRecorder_UserNextPrompterPage
        {
            get
            {
                return SteamVR_Actions.p_mixedRealityRecorder_UserNextPrompterPage.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean mixedRealityRecorder_OperatorRotateScene
        {
            get
            {
                return SteamVR_Actions.p_mixedRealityRecorder_OperatorRotateScene.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean mixedRealityRecorder_OperatorCycleMode
        {
            get
            {
                return SteamVR_Actions.p_mixedRealityRecorder_OperatorCycleMode.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean mixedRealityRecorder_UserCycleMode
        {
            get
            {
                return SteamVR_Actions.p_mixedRealityRecorder_UserCycleMode.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean mixedRealityRecorder_OperatorDPadUp
        {
            get
            {
                return SteamVR_Actions.p_mixedRealityRecorder_OperatorDPadUp.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean mixedRealityRecorder_OperatorDPadDown
        {
            get
            {
                return SteamVR_Actions.p_mixedRealityRecorder_OperatorDPadDown.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean mixedRealityRecorder_OperatorDPadRight
        {
            get
            {
                return SteamVR_Actions.p_mixedRealityRecorder_OperatorDPadRight.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean mixedRealityRecorder_OperatorDPadLeft
        {
            get
            {
                return SteamVR_Actions.p_mixedRealityRecorder_OperatorDPadLeft.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean mixedRealityRecorder_UserDPadUp
        {
            get
            {
                return SteamVR_Actions.p_mixedRealityRecorder_UserDPadUp.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean mixedRealityRecorder_UserDPadDown
        {
            get
            {
                return SteamVR_Actions.p_mixedRealityRecorder_UserDPadDown.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean mixedRealityRecorder_UserDPadRight
        {
            get
            {
                return SteamVR_Actions.p_mixedRealityRecorder_UserDPadRight.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean mixedRealityRecorder_UserDPadLeft
        {
            get
            {
                return SteamVR_Actions.p_mixedRealityRecorder_UserDPadLeft.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        private static void InitializeActionArrays()
        {
            Valve.VR.SteamVR_Input.actions = new Valve.VR.SteamVR_Action[] {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_Pose,
                    SteamVR_Actions.default_SkeletonLeftHand,
                    SteamVR_Actions.default_SkeletonRightHand,
                    SteamVR_Actions.default_Squeeze,
                    SteamVR_Actions.default_HeadsetOnHead,
                    SteamVR_Actions.default_SnapTurnLeft,
                    SteamVR_Actions.default_SnapTurnRight,
                    SteamVR_Actions.default_Haptic,
                    SteamVR_Actions.mixedRealityRecorder_OperatorToggleRecording,
                    SteamVR_Actions.mixedRealityRecorder_OperatorTrigger,
                    SteamVR_Actions.mixedRealityRecorder_UserTrigger,
                    SteamVR_Actions.mixedRealityRecorder_UserNextPrompterPage,
                    SteamVR_Actions.mixedRealityRecorder_OperatorRotateScene,
                    SteamVR_Actions.mixedRealityRecorder_OperatorCycleMode,
                    SteamVR_Actions.mixedRealityRecorder_UserCycleMode,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadUp,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadDown,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadRight,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadLeft,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadUp,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadDown,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadRight,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadLeft};
            Valve.VR.SteamVR_Input.actionsIn = new Valve.VR.ISteamVR_Action_In[] {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_Pose,
                    SteamVR_Actions.default_SkeletonLeftHand,
                    SteamVR_Actions.default_SkeletonRightHand,
                    SteamVR_Actions.default_Squeeze,
                    SteamVR_Actions.default_HeadsetOnHead,
                    SteamVR_Actions.default_SnapTurnLeft,
                    SteamVR_Actions.default_SnapTurnRight,
                    SteamVR_Actions.mixedRealityRecorder_OperatorToggleRecording,
                    SteamVR_Actions.mixedRealityRecorder_OperatorTrigger,
                    SteamVR_Actions.mixedRealityRecorder_UserTrigger,
                    SteamVR_Actions.mixedRealityRecorder_UserNextPrompterPage,
                    SteamVR_Actions.mixedRealityRecorder_OperatorRotateScene,
                    SteamVR_Actions.mixedRealityRecorder_OperatorCycleMode,
                    SteamVR_Actions.mixedRealityRecorder_UserCycleMode,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadUp,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadDown,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadRight,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadLeft,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadUp,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadDown,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadRight,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadLeft};
            Valve.VR.SteamVR_Input.actionsOut = new Valve.VR.ISteamVR_Action_Out[] {
                    SteamVR_Actions.default_Haptic};
            Valve.VR.SteamVR_Input.actionsVibration = new Valve.VR.SteamVR_Action_Vibration[] {
                    SteamVR_Actions.default_Haptic};
            Valve.VR.SteamVR_Input.actionsPose = new Valve.VR.SteamVR_Action_Pose[] {
                    SteamVR_Actions.default_Pose};
            Valve.VR.SteamVR_Input.actionsBoolean = new Valve.VR.SteamVR_Action_Boolean[] {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_HeadsetOnHead,
                    SteamVR_Actions.default_SnapTurnLeft,
                    SteamVR_Actions.default_SnapTurnRight,
                    SteamVR_Actions.mixedRealityRecorder_OperatorToggleRecording,
                    SteamVR_Actions.mixedRealityRecorder_OperatorTrigger,
                    SteamVR_Actions.mixedRealityRecorder_UserTrigger,
                    SteamVR_Actions.mixedRealityRecorder_UserNextPrompterPage,
                    SteamVR_Actions.mixedRealityRecorder_OperatorRotateScene,
                    SteamVR_Actions.mixedRealityRecorder_OperatorCycleMode,
                    SteamVR_Actions.mixedRealityRecorder_UserCycleMode,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadUp,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadDown,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadRight,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadLeft,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadUp,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadDown,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadRight,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadLeft};
            Valve.VR.SteamVR_Input.actionsSingle = new Valve.VR.SteamVR_Action_Single[] {
                    SteamVR_Actions.default_Squeeze};
            Valve.VR.SteamVR_Input.actionsVector2 = new Valve.VR.SteamVR_Action_Vector2[0];
            Valve.VR.SteamVR_Input.actionsVector3 = new Valve.VR.SteamVR_Action_Vector3[0];
            Valve.VR.SteamVR_Input.actionsSkeleton = new Valve.VR.SteamVR_Action_Skeleton[] {
                    SteamVR_Actions.default_SkeletonLeftHand,
                    SteamVR_Actions.default_SkeletonRightHand};
            Valve.VR.SteamVR_Input.actionsNonPoseNonSkeletonIn = new Valve.VR.ISteamVR_Action_In[] {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_Squeeze,
                    SteamVR_Actions.default_HeadsetOnHead,
                    SteamVR_Actions.default_SnapTurnLeft,
                    SteamVR_Actions.default_SnapTurnRight,
                    SteamVR_Actions.mixedRealityRecorder_OperatorToggleRecording,
                    SteamVR_Actions.mixedRealityRecorder_OperatorTrigger,
                    SteamVR_Actions.mixedRealityRecorder_UserTrigger,
                    SteamVR_Actions.mixedRealityRecorder_UserNextPrompterPage,
                    SteamVR_Actions.mixedRealityRecorder_OperatorRotateScene,
                    SteamVR_Actions.mixedRealityRecorder_OperatorCycleMode,
                    SteamVR_Actions.mixedRealityRecorder_UserCycleMode,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadUp,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadDown,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadRight,
                    SteamVR_Actions.mixedRealityRecorder_OperatorDPadLeft,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadUp,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadDown,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadRight,
                    SteamVR_Actions.mixedRealityRecorder_UserDPadLeft};
        }
        
        private static void PreInitActions()
        {
            SteamVR_Actions.p_default_InteractUI = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/InteractUI")));
            SteamVR_Actions.p_default_Teleport = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/Teleport")));
            SteamVR_Actions.p_default_GrabPinch = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/GrabPinch")));
            SteamVR_Actions.p_default_GrabGrip = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/GrabGrip")));
            SteamVR_Actions.p_default_Pose = ((SteamVR_Action_Pose)(SteamVR_Action.Create<SteamVR_Action_Pose>("/actions/default/in/Pose")));
            SteamVR_Actions.p_default_SkeletonLeftHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create<SteamVR_Action_Skeleton>("/actions/default/in/SkeletonLeftHand")));
            SteamVR_Actions.p_default_SkeletonRightHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create<SteamVR_Action_Skeleton>("/actions/default/in/SkeletonRightHand")));
            SteamVR_Actions.p_default_Squeeze = ((SteamVR_Action_Single)(SteamVR_Action.Create<SteamVR_Action_Single>("/actions/default/in/Squeeze")));
            SteamVR_Actions.p_default_HeadsetOnHead = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/HeadsetOnHead")));
            SteamVR_Actions.p_default_SnapTurnLeft = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/SnapTurnLeft")));
            SteamVR_Actions.p_default_SnapTurnRight = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/SnapTurnRight")));
            SteamVR_Actions.p_default_Haptic = ((SteamVR_Action_Vibration)(SteamVR_Action.Create<SteamVR_Action_Vibration>("/actions/default/out/Haptic")));
            SteamVR_Actions.p_mixedRealityRecorder_OperatorToggleRecording = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/mixedRealityRecorder/in/OperatorToggleRecording")));
            SteamVR_Actions.p_mixedRealityRecorder_OperatorTrigger = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/mixedRealityRecorder/in/OperatorTrigger")));
            SteamVR_Actions.p_mixedRealityRecorder_UserTrigger = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/mixedRealityRecorder/in/UserTrigger")));
            SteamVR_Actions.p_mixedRealityRecorder_UserNextPrompterPage = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/mixedRealityRecorder/in/UserNextPrompterPage")));
            SteamVR_Actions.p_mixedRealityRecorder_OperatorRotateScene = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/mixedRealityRecorder/in/OperatorRotateScene")));
            SteamVR_Actions.p_mixedRealityRecorder_OperatorCycleMode = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/mixedRealityRecorder/in/OperatorCycleMode")));
            SteamVR_Actions.p_mixedRealityRecorder_UserCycleMode = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/mixedRealityRecorder/in/UserCycleMode")));
            SteamVR_Actions.p_mixedRealityRecorder_OperatorDPadUp = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/mixedRealityRecorder/in/OperatorDPadUp")));
            SteamVR_Actions.p_mixedRealityRecorder_OperatorDPadDown = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/mixedRealityRecorder/in/OperatorDPadDown")));
            SteamVR_Actions.p_mixedRealityRecorder_OperatorDPadRight = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/mixedRealityRecorder/in/OperatorDPadRight")));
            SteamVR_Actions.p_mixedRealityRecorder_OperatorDPadLeft = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/mixedRealityRecorder/in/OperatorDPadLeft")));
            SteamVR_Actions.p_mixedRealityRecorder_UserDPadUp = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/mixedRealityRecorder/in/UserDPadUp")));
            SteamVR_Actions.p_mixedRealityRecorder_UserDPadDown = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/mixedRealityRecorder/in/UserDPadDown")));
            SteamVR_Actions.p_mixedRealityRecorder_UserDPadRight = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/mixedRealityRecorder/in/UserDPadRight")));
            SteamVR_Actions.p_mixedRealityRecorder_UserDPadLeft = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/mixedRealityRecorder/in/UserDPadLeft")));
        }
    }
}
